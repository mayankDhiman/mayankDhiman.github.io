<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <generator uri="http://jekyllrb.com" version="3.8.5">Jekyll</generator>
  
  
  <link href="/feed.xml" rel="self" type="application/atom+xml" />
  <link href="/" rel="alternate" type="text/html" hreflang="en" />
  <updated>2019-06-19T20:38:57+00:00</updated>
  <id>//</id>

  
    <title type="html">Cofienâ€™s Blog</title>
  

  
    <subtitle>Blog</subtitle>
  

  
    <author>
        <name>mayankDhiman</name>
      
      
    </author>
  

  
  
    <entry>
      
      <title type="html">Week 1 to 3 aerospaceresearch.net</title>
      
      
      <link href="/2019/06/18/Week_1_to_3_aerospaceresearch.net/" rel="alternate" type="text/html" title="Week 1 to 3 aerospaceresearch.net" />
      
      <published>2019-06-18T21:40:14+00:00</published>
      <updated>2019-06-18T21:40:14+00:00</updated>
      <id>/2019/06/18/Week_1_to_3_aerospaceresearch.net</id>
      <content type="html" xml:base="/2019/06/18/Week_1_to_3_aerospaceresearch.net/">&lt;p&gt;This blog post is intended to pen down my experience of working with aerospaceresearch.net and on VisMa â€“ Visual Math as a part of Google Summer of Code 2019. A part of this blog post will be about how it feels to be working here &amp;amp; other parts will focus on technicalities of the project (about how VisMa has been improved over the past three weeks).&lt;/p&gt;

&lt;p&gt;Firstly, working with aerospaceresearch.net has been a great experience. The mentors of the project Shantanu, Manfred &amp;amp; Siddharth are very helpful. We almost regularly have chat on Zulip (&amp;amp; sometimes on WhatsApp) wherein we discuss the plans for the project and about implementation. Owing to these healthy discussions the project development is going at a fast rate (which is indeed a good thing!). The code base of VisMa is very well written and the complex task of simplifying mathematical equations has been beautifully coded. About the workload, I work regularly for 5 â€“ 6 hours, but sometimes when a crucial bug finds its way in, the work time has to be increased. Overall itâ€™s a Fun &amp;amp; Learn experience.&lt;/p&gt;

&lt;p&gt;Now letâ€™s talk about what we &lt;strong&gt;(the VisMa Team)&lt;/strong&gt; have achieved so far. During the Community Bonding Period, I spend my time to get equipped with basics of PyQt (on which the GUI of VisMa is based) and spend the remaining time studying the tokenizing and simplify modules. Honestly, these modules were hard to understand. But the effort turned fruitful during the coding period. Also, I completed the task of simultaneous equation solver during this time. The logic was easy to frame, but the inclusion of comments and animations was tricky and involved the entire redesigning of the LaTex generator module (the part which created the final latex to be displayed in GUI).&lt;/p&gt;

&lt;p&gt;Over to the first week of the coding period, the task which was decided was to re-design all the simplify module in an object-oriented fashion, which before coding period I believed would be most difficult to write &lt;em&gt;(after all more than 2000 lines of complex Pythonic logic, to be honest, was scary)&lt;/em&gt;. But, efforts to understand module during the Community Bonding Period turned out to be fruitful, and I was happy to achieve this task in the desired time. Like any other programming project, there are some minor bugs out there, which will be fixed in the upcoming time!&lt;/p&gt;

&lt;p&gt;Coming to week second, we decided to work on &lt;em&gt;Expression&lt;/em&gt; Simplification. Now, what &lt;em&gt;Expression&lt;/em&gt; is, briefly (&amp;amp; vaguely) any part of inputted equation enclosed in brackets can be termed as an &lt;em&gt;Expression&lt;/em&gt;. So like when we solve an equation by hand, we solve the bracket part first, our task was to make visma do same! Earlier it didnâ€™t support &lt;em&gt;Expression&lt;/em&gt; simplification. For that, we decided to go for a complex recursive logic (solving the inner &lt;em&gt;Expression&lt;/em&gt; first then the outer &lt;em&gt;Expression&lt;/em&gt;s &amp;amp; so on). Recursive logic was complex &amp;amp; time consuming to implement, taking care of all comments &amp;amp; animations during recursion was a challenge. It took somewhat 9 days to come up with something fruitful. But yes it was worth it, VisMa could easily solve &lt;em&gt;Expression&lt;/em&gt;s now. &lt;strong&gt;A happy moment indeed!&lt;/strong&gt; ðŸ™‚&lt;/p&gt;

&lt;p&gt;Next phase was to include a new module to VisMa. It was decided it has to be a Discrete Math module (â€˜cause why the heck not!). We decided to go for Combinatorics stuff first, thus implementing Combinations &amp;amp; Permutation stuff. These modules require factorial of a number, I got this idea why not to implement factorial as a separate module and then use in Permutations &amp;amp; Combinations stuff. This added the factorial feature to VisMa!&lt;/p&gt;

&lt;p&gt;For now, I am working of adding triple degree equation solvers to project. We as of now have decided to do so using Cardano Algorithm. If this turns out well it will also be done for four-degree equations. After this will be done, VisMa will be capable of solving &amp;amp; showing detailed steps for up to 4-degree equations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chears to &lt;code class=&quot;highlighter-rouge&quot;&gt;Code&lt;/code&gt;, Space &amp;amp; Maths!&lt;/strong&gt;&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>mayankDhiman</name>
          
          
        </author>
      

      
        <category term="jekyll" />
      
        <category term="update" />
      

      
        <category term="nothing" />
      

      
        <summary type="html">This blog post is intended to pen down my experience of working with aerospaceresearch.net and on VisMa â€“ Visual Math as a part of Google Summer of Code 2019. A part of this blog post will be about how it feels to be working here &amp;amp; other parts will focus on technicalities of the project (about how VisMa has been improved over the past three weeks). Firstly, working with aerospaceresearch.net has been a great experience. The mentors of the project Shantanu, Manfred &amp;amp; Siddharth are very helpful. We almost regularly have chat on Zulip (&amp;amp; sometimes on WhatsApp) wherein we discuss the plans for the project and about implementation. Owing to these healthy discussions the project development is going at a fast rate (which is indeed a good thing!). The code base of VisMa is very well written and the complex task of simplifying mathematical equations has been beautifully coded. About the workload, I work regularly for 5 â€“ 6 hours, but sometimes when a crucial bug finds its way in, the work time has to be increased. Overall itâ€™s a Fun &amp;amp; Learn experience. Now letâ€™s talk about what we (the VisMa Team) have achieved so far. During the Community Bonding Period, I spend my time to get equipped with basics of PyQt (on which the GUI of VisMa is based) and spend the remaining time studying the tokenizing and simplify modules. Honestly, these modules were hard to understand. But the effort turned fruitful during the coding period. Also, I completed the task of simultaneous equation solver during this time. The logic was easy to frame, but the inclusion of comments and animations was tricky and involved the entire redesigning of the LaTex generator module (the part which created the final latex to be displayed in GUI). Over to the first week of the coding period, the task which was decided was to re-design all the simplify module in an object-oriented fashion, which before coding period I believed would be most difficult to write (after all more than 2000 lines of complex Pythonic logic, to be honest, was scary). But, efforts to understand module during the Community Bonding Period turned out to be fruitful, and I was happy to achieve this task in the desired time. Like any other programming project, there are some minor bugs out there, which will be fixed in the upcoming time! Coming to week second, we decided to work on Expression Simplification. Now, what Expression is, briefly (&amp;amp; vaguely) any part of inputted equation enclosed in brackets can be termed as an Expression. So like when we solve an equation by hand, we solve the bracket part first, our task was to make visma do same! Earlier it didnâ€™t support Expression simplification. For that, we decided to go for a complex recursive logic (solving the inner Expression first then the outer Expressions &amp;amp; so on). Recursive logic was complex &amp;amp; time consuming to implement, taking care of all comments &amp;amp; animations during recursion was a challenge. It took somewhat 9 days to come up with something fruitful. But yes it was worth it, VisMa could easily solve Expressions now. A happy moment indeed! ðŸ™‚ Next phase was to include a new module to VisMa. It was decided it has to be a Discrete Math module (â€˜cause why the heck not!). We decided to go for Combinatorics stuff first, thus implementing Combinations &amp;amp; Permutation stuff. These modules require factorial of a number, I got this idea why not to implement factorial as a separate module and then use in Permutations &amp;amp; Combinations stuff. This added the factorial feature to VisMa! For now, I am working of adding triple degree equation solvers to project. We as of now have decided to do so using Cardano Algorithm. If this turns out well it will also be done for four-degree equations. After this will be done, VisMa will be capable of solving &amp;amp; showing detailed steps for up to 4-degree equations. Chears to Code, Space &amp;amp; Maths!</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">GSoCing Up!</title>
      
      
      <link href="/2019/05/09/GSoCing_Up!/" rel="alternate" type="text/html" title="GSoCing Up!" />
      
      <published>2019-05-09T21:40:14+00:00</published>
      <updated>2019-05-09T21:40:14+00:00</updated>
      <id>/2019/05/09/GSoCing_Up!</id>
      <content type="html" xml:base="/2019/05/09/GSoCing_Up!/">&lt;p&gt;Ahoi!&lt;/p&gt;

&lt;p&gt;After hours of SERIOUS web surfing. So, yep this is my new &lt;code class=&quot;highlighter-rouge&quot;&gt;github.io&lt;/code&gt;, hope you like it :/&lt;/p&gt;

&lt;p&gt;Coming to the point, this summer I would be working on Google Summer of Code with &lt;code class=&quot;highlighter-rouge&quot;&gt;aerospaceresearch.net&lt;/code&gt;, which I am pretty sure will be a great experience. This summer, I would be posting a lot of blogs regarding the same. So, yep &lt;strong&gt;STAY TUNED&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Peace!&lt;/p&gt;

&lt;!-- BELOW IS WHAT USED TO BE HERE, REFER FOR ANY REFERENCE ON USING THIS THEME --&gt;
&lt;!-- Youâ€™ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.

To add new posts, simply add a file in the `_posts` directory that follows the convention `YYYY-MM-DD-name-of-post.ext` and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.

Jekyll also offers powerful support for code snippets:


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyllâ€™s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk]. --&gt;</content>

      
      
      
      
      

      
        <author>
            <name>mayankDhiman</name>
          
          
        </author>
      

      
        <category term="jekyll" />
      
        <category term="update" />
      

      
        <category term="nothing" />
      

      
        <summary type="html">Ahoi! After hours of SERIOUS web surfing. So, yep this is my new github.io, hope you like it :/ Coming to the point, this summer I would be working on Google Summer of Code with aerospaceresearch.net, which I am pretty sure will be a great experience. This summer, I would be posting a lot of blogs regarding the same. So, yep STAY TUNED. Peace!</summary>
      

      
      
    </entry>
  
  
</feed>
